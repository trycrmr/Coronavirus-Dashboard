<!DOCTYPE html>
<html lang="en">

<%- include('./partials/head'); -%>


<body>
  <%- include('./partials/navigation'); -%>

    <div class="container-fluid" style="background-color: white;">
      <form class="plot-filters">
        <div class="form-group">
          <label>Choose a region:</label>
          <div class="btn-group btn-group-toggle region-filter-btns" data-toggle="buttons">
            <label class="btn btn-dark active">
              <input value="Global" type="radio" name="options" autocomplete="off" checked> Global
            </label>
            <% for( let index = 1; index < data.displayOrder.length; index++ ) { %>
              <label class="btn btn-dark">
                <input value="<%= data.displayOrder[index] %>" type="radio" name="options" autocomplete="off"> <%= data.displayOrder[index] %>
              </label>
            <% } %>
          </div>
        </div>
        <div class="form-group">
          <label>Choose a few metrics:</label>
          <div class="btn-group btn-group-toggle metric-filter-btns" data-toggle="buttons">
            <label class="btn btn-dark active">
              <input type="checkbox" value="cases" name="metric" id="metric" autocomplete="off" checked> Cases
            </label>
            <label class="btn btn-dark">
              <input type="checkbox" value="recovered" name="metric" id="metric" autocomplete="off"> Recovered
            </label>
            <label class="btn btn-dark">
              <input type="checkbox" value="critical" name="metric" id="metric" autocomplete="off"> Critical
            </label>
            <label class="btn btn-dark">
              <input type="checkbox" value="deaths" name="metric" id="metric" autocomplete="off"> Deaths
            </label>
          </div>
          <!-- ^Hardcoded to match the keys that have integer values in the data values for each region/subregion -->
        </div>
      </form>
      <div id="plot"></div>
      <div><%- data.lastUpdated %> </div>
    </div>

<%- include('./partials/scripts'); -%>
</body>

<!-- App with Plotly -->
<script>
  var data = <%- JSON.stringify(data) %>

  const defaultState = { 
    data, 
    filters: {region: ['Global'], subregion: [], metric: ['cases']},
    debug: true,
    plot: { target: (id = 'plot') => { return document.getElementById(id) },
    config: undefined },
    listeners: []
  }

  function App (state = defaultState) {
    this.log = output => console.info(output)
    this.state = state
    this.updateState = (newState) => {
      if(!(JSON.stringify(this.state) === JSON.stringify({ ...this.state, ...newState }))) {
        if(this.state.debug) {
        this.log('=== Current State ===')
        this.log(this.state)
        this.log('=== State update ===')
        this.log(newState)
      }
        this.state = { ...this.state, ...newState }
        if(this.state.debug) {
          this.log('=== New State ===')
          this.log(this.state)
        }
        this.state.listeners.forEach(thisListener => thisListener());
        return this.state
      } else {
        return this.state
      }
    }
    this.setFilters = (type, filters) => {
      switch(type) {
        case 'region':
          return this.updateState( { filters: { ...this.state.filters, region: [ filters ] } } )
        case 'metric':
          return this.updateState( { filters: { ...this.state.filters, metric: [ ...filters ] } } )
        default:
          return this.state
      }
    }
    this.updatePlot = (id, type) => { 
      let thisPlotConfig = this.getPlotConfig(type, this.state.filters)
      let newState = this.updateState( { plot: { ...this.state.plot, ... { config: { data: thisPlotConfig[0], layout: thisPlotConfig[1]} } } } ) 
      this.state.plot.target(id)
      Plotly.newPlot(this.state.plot.target(id), newState.plot.config.data, newState.plot.config.layout, { responsive: true }).then(() => console.info('Chart updated')).catch(err => console.error(err)) // Handle this error some other way later
    }
    this.getPlotConfig = (type = 'bar', filters = this.state.filters, plotLayout = undefined) => {
      plotLayout = { title: `Count of ${[filters.metric.slice(0, -1).join(', '), filters.metric.slice(-1)[0]].join(filters.metric.length < 2 ? '' : ' and ')} in ${filters.region[0]}`} // https://stackoverflow.com/a/16251861/5935694
      plotLayout = { 
        ...plotLayout, 
        autosize: false, 
        width: parseFloat(getComputedStyle(this.state.plot.target()).width), 
        // height needs to be set dynamically based on the number of items on the x-axis to allow it to dynamically extend vertically with an unobtrusive distance between ticks
        yaxis: { 
          automargin: true, 
          tickfont: { size: parseFloat(getComputedStyle(this.state.plot.target()).fontSize) }, 
          autorange: 'reversed' 
        }
      }
      if(this.state.filters.metric.length > 1) plotLayout = { ...plotLayout, barmode: 'group'  }
      let plotData = undefined
      switch(type) {
        case 'bar': 
          let filterForRegion = this.state.data[filters.region[0]].regions // eventually could be written to handle multiple selections at once
          plotData = this.state.filters.metric.map(thisMetric => {
            return filterForRegion.reduce((acc, curr) => {
              if(!acc.name) acc.name = thisMetric 
              acc.x.push(curr[thisMetric]) // Note that selecting "critical" in Europe & Latin America currently results in NaN. Idk if this is by design or a data quality issue. 
              acc.y.push(curr.country) // 'country' is the key for whatever the location is called (region, country, subregion, etc.)
              return acc
            }, { x: [], y: [], name: undefined, type: 'bar', orientation: 'h' })
          })
          plotLayout = { ...plotLayout, 
            ...{ 
              height: parseFloat(getComputedStyle(this.state.plot.target()).fontSize) * plotData[0].y.length * 2, // dynamically set the height of the target div based on the amount of data to be displayed. This enables dynamically sizing the graph vertically to, hopefully, a comfortable viewing experience. Multiplying the fontsize by two seems to be the sweet spot where no labels are hidden by each other and all bars show ¯\_(ツ)_/¯
              xaxis: { // puts the x-axis on the top of the page so the user can see the scale when the page loads and as they adjust the filters
                ...plotLayout.xaxis,
                mirror: 'allticks',
                side: 'top',
                fixedrange: true, // disables zoom; It can be disorienting and makes scrolling more difficult on mobile
                showspikes: true // on hover, a dotted line will track to either axis and display the labels
              },
              yaxis: { ...plotLayout.yaxis,
                fixedrange: true,
                showspikes: true
              }
            }  
          }
          break
        default:
          plotData = [
            {
              x: ['oops', 'something', 'went', 'wrong'],
              y: [20, 14, 23, 12],
              type: 'bar'
            }
          ]
      }
      return [plotData, plotLayout]
    }
  }

  $(document).ready(() => {
    const app = new App()
    app.updateState({ listeners: [...app.state.listeners, ...[ () => app.updatePlot('plot') ]] } )
    document.querySelector('.region-filter-btns').addEventListener('click', event => event.target.value ? app.setFilters('region', event.target.value) : undefined) 
    document.querySelector('.metric-filter-btns').addEventListener('click', event => {
      if(!event.target.value) return undefined
      if(event.target.checked) app.setFilters('metric', [ ...app.state.filters.metric, event.target.value ])
      if(!event.target.checked) app.setFilters('metric', app.state.filters.metric.filter( metric => !(metric === event.target.value) ))
    })
  })

</script>
<!-- end App with Plotly -->

</html>
