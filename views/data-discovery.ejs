<!DOCTYPE html>
<html lang="en">

<%- include('./partials/head'); -%>


<body>
  <%- include('./partials/navigation'); -%>

    <div class="container-fluid" style="height: 100%; min-height: 100vh; background-color: white;">
      <form class="plot-filters">
        <div class="form-group">
          <label>Choose a region:</label>
          <select class="custom-select region-filter">
            <% for( let index = 0; index < data.displayOrder.length; index++ ) { %>
              <option value="<%= data.displayOrder[index] %>"><%= data.displayOrder[index] %></option>
            <% } %>
          </select>
          <label>Choose a few metrics:</label>
          <select class="custom-select metric-filter" multiple="true">
            <option value="cases">Cases</option>
            <option value="recovered">Recovered</option>
            <option value="critical">Critical</option>
            <option value="deaths">Deaths</option>
          </select>
          <!-- ^Hardcoded to match the keys that have integer values in the data values for each region/subregion -->
        </div>
      </form>
      <div id="plot"></div>
      <div id="plot2"></div>
      <div><%- data.lastUpdated %> </div>
    </div>

<%- include('./partials/scripts'); -%>
</body>

<!-- App with Plotly -->
<script>
  var data = <%- JSON.stringify(data) %>

  const defaultState = { 
    data, 
    filters: {region: ['Global'], subregion: [], metric: ['cases']},
    debug: true,
    plot: { target: (id = 'plot') => { return document.getElementById(id) },
    config: undefined },
    listeners: []
  }

  function App (state = defaultState) {
    this.log = output => console.info(output)
    this.state = state
    this.updateState = (newState) => {
      if(!(JSON.stringify(this.state) === JSON.stringify({ ...this.state, ...newState }))) {
        if(this.state.debug) {
        this.log('=== Current State ===')
        this.log(this.state)
        this.log('=== State update ===')
        this.log(newState)
      }
        this.state = { ...this.state, ...newState }
        if(this.state.debug) {
          this.log('=== New State ===')
          this.log(this.state)
        }
        this.state.listeners.forEach(thisListener => thisListener());
        return this.state
      } else {
        return this.state
      }
    }
    this.setFilters = (type, filters) => {
      console.info(filters)
      switch(type) {
        case 'region':
          return this.updateState( { filters: { ...this.state.filters, region: [ filters ] } } )
        case 'metric':
          return this.updateState( { filters: { ...this.state.filters, metric: [ ...filters ] } } )
        default:
          return this.state
      }
    }
    this.updatePlot = (id, type) => { 
      let thisPlotConfig = this.getPlotConfig(type, this.state.filters)
      let newState = this.updateState( { plot: { ...this.state.plot, ... { config: { data: thisPlotConfig[0], layout: thisPlotConfig[1]} } } } ) 
      this.state.plot.target(id)
      Plotly.newPlot(this.state.plot.target(id), newState.plot.config.data, newState.plot.config.layout).then(() => console.info('Chart updated')).catch(err => console.error(err)) // Handle this error some other way later
    }
    this.getPlotConfig = (type = 'bar', filters = this.state.filters, plotLayout = undefined) => {
      plotLayout = { title: `Count of ${[filters.metric.slice(0, -1).join(', '), filters.metric.slice(-1)[0]].join(filters.metric.length < 2 ? '' : ' and ')} in ${filters.region[0]}`} // https://stackoverflow.com/a/16251861/5935694
      if(this.state.filters.metric.length > 1) plotLayout = { ...plotLayout, barmode: 'group'  }
      let plotData = undefined
      switch(type) {
        case 'bar': 
          let filterForRegion = this.state.data[filters.region[0]].regions // eventually could be written to handle multiple selections at once
          plotData = this.state.filters.metric.map(thisMetric => {
            return filterForRegion.reduce((acc, curr) => {
              if(!acc.name) acc.name = thisMetric 
              acc.x.push(curr.country) // 'country' is the key for whatever the location is called (region, country, subregion, etc.)
              acc.y.push(curr[thisMetric]) // Note that selecting "critical" in Europe & Latin America currently results in NaN. Idk if this is by design or a data quality issue. 
              return acc
            }, { x: [], y: [], name: undefined, type: 'bar'})
          })
          break
        default:
          plotData = [
            {
              x: ['giraffes', 'orangutans', 'monkeys'],
              y: [20, 14, 23],
              type: 'bar'
            }
          ]
      }
      console.info(plotData, plotLayout)
      return [plotData, plotLayout]
    }
  }

  $(document).ready(() => {
    const app = new App()
    app.updateState({ listeners: [...app.state.listeners, ...[ () => app.updatePlot('plot') ]] } )
    document.querySelector('.region-filter').addEventListener('input', event => app.setFilters('region', event.target.value))
    document.querySelector('.metric-filter').addEventListener('input', event => app.setFilters('metric', [...event.target.options].filter(o => o.selected).map(o => o.value)))
  })

</script>
<!-- end App with Plotly -->

</html>
