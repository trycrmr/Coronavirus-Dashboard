<!DOCTYPE html>
<html lang="en">

<%- include('./partials/head'); -%>


<body>
  <%- include('./partials/navigation'); -%>

    <div class="container-fluid" style="height: 100%; min-height: 100vh; background-color: white;">
      <form class="plot-filters">
        <div class="form-group">
          <label>Choose a Region:</label>
          <select class="custom-select region-filter">
            <% for( let index = 0; index < data.displayOrder.length; index++ ) { %>
              <option value="<%= data.displayOrder[index] %>"><%= data.displayOrder[index] %></option>
            <% } %>
          </select>
        </div>
      </form>
      <div id="plot"></div>
      <div id="plot2"></div>
      <div><%- data.lastUpdated %> </div>
    </div>

<%- include('./partials/scripts'); -%>
</body>

<!-- App with Plotly -->
<script>
  var data = <%- JSON.stringify(data) %>

  const defaultState = { data, filters: {region: [], subregion: []}, debug: true, plot: { target: (id = 'plot') => { return document.getElementById(id) }, config: undefined } }

  function App (state = defaultState) {
    this.log = output => console.info(output)
    this.state = state
    this.updateState = (newState) => {
      if(this.state.debug) {
        this.log('=== Current State ===')
        this.log(this.state)
        this.log('=== State update ===')
        this.log(newState)
      } 
      this.state = { ...this.state, ...newState }
      if(this.state.debug) {
        this.log('=== New State ===')
        this.log(this.state)
      } 
      return this.state
    }
    this.updatePlot = (id, type, filters) => { 
      let newState = this.updateState( { plot: { ...this.state.plot, ... { config: this.getPlotConfig(type, filters) } } } ) 
      Plotly.newPlot(this.state.plot.target(id), newState.plot.config)
    }
    this.getPlotConfig = (type = 'bar', filters = {region: ['Global'], subregion: []}) => {
      let plotConfig = undefined
      switch(type) {
        case 'bar': 
          let filterForRegion = this.state.data[filters.region[0]].regions // eventually could be written to handle multiple selections at once
            plotConfig = filterForRegion.reduce((acc, curr, currIdx, origArr) => {
              acc[0].x.push(curr.country)
              acc[0].y.push(curr.cases)
              return acc
            }, [{ x: [], y: [], type: 'bar'}])
          break
        default:
          plotConfig = [
            {
              x: ['giraffes', 'orangutans', 'monkeys'],
              y: [20, 14, 23],
              type: 'bar'
            }
          ]
      }
      return plotConfig
    }
  }

  $(document).ready(() => {
    const app = new App()
    app.updatePlot() // inits default plot
    document.querySelector('.region-filter').addEventListener('change', event => app.updatePlot(undefined, undefined, {region: [event.target.value]}))
  })

</script>
<!-- end App with Plotly -->

</html>
